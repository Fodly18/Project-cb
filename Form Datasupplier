import java.sql.*;
import Koneksi.Conek;
import java.text.SimpleDateFormat;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class DataSupplier extends javax.swing.JFrame {
String Tanggal;

    /**
     * Creates new form DataProdukKasir
     */
    public DataSupplier() {
        initComponents();
        datatable();
    }
    
    

    private String generateKodeBarang() {
    String kodeBarang = "BRG"; // Prefiks
    int number = 0;

    try {
        Connection conn = Conek.configDB();
        Statement statement = conn.createStatement();
        ResultSet res = statement.executeQuery("SELECT COUNT(*) FROM barang");
        
        if (res.next()) {
            number = res.getInt(1) + 1; // Menambah 1 dari total barang yang ada
        }
        
        res.close();
        statement.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, "Error: " + e.getMessage());
    }

    // Menggabungkan prefiks dengan angka
    return kodeBarang + String.format("%04d", number); // BRG0001, BRG0002, dst.
}
    private void clear() {
    txtnamabarang.setText("");
    txtharga.setText("");
    txtstok.setText("");
    cmbjenis.setSelectedIndex(0); // Mengatur combobox ke nilai default, asumsi index 0 adalah nilai default
    txtdate.setDate(null); // Mengatur tanggal ke null
}
    



    public void datatable() {
        DefaultTableModel tbl = new DefaultTableModel();
        tbl.addColumn("Kode Barang");
        tbl.addColumn("Nama Barang");
        tbl.addColumn("Harga");
        tbl.addColumn("Stok");
        tbl.addColumn("Jenis");
        tbl.addColumn("Expired");
        tabel.setModel(tbl);
    
    try {
        Connection conn = Conek.configDB();
        Statement statement = conn.createStatement();
        ResultSet res = statement.executeQuery("SELECT * FROM barang");
        
        while (res.next()) {
            tbl.addRow(new Object[]{
                res.getString("Kode_barang"),
                res.getString("Nama_barang"),
                res.getString("Harga"),
                res.getString("Stok"),
                res.getString("Jenis"),
                res.getString("Expired")
            });
        }
        
        
        res.close();
        statement.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, "Error: " + e.getMessage());
    }

    }
    
    void bersih(){
      txt_search.setText("Search");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        txt_search = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton33 = new javax.swing.JButton();
        jButton26 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        txtdate = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txtnamabarang = new javax.swing.JTextField();
        txtharga = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        Logout = new javax.swing.JButton();
        txtstok = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        cmbjenis = new javax.swing.JComboBox<>();
        btnsimpan = new javax.swing.JButton();
        btnedit = new javax.swing.JButton();
        hapus = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabel = new javax.swing.JTable();
        btncari = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        PindahDiskon = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        persegi_di_bawh_admin1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_search.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_search.setText("Search");
        txt_search.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_searchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_searchFocusLost(evt);
            }
        });
        txt_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_searchActionPerformed(evt);
            }
        });
        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_searchKeyReleased(evt);
            }
        });
        getContentPane().add(txt_search, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 290, -1));

        jPanel1.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 410, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/[removal 35.png"))); // NOI18N
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 200, 180));

        jButton33.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Group 6.png"))); // NOI18N
        jButton33.setBorderPainted(false);
        jButton33.setContentAreaFilled(false);
        jButton33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton33ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton33, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 270, -1, 40));

        jButton26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Group 1.png"))); // NOI18N
        jButton26.setBorderPainted(false);
        jButton26.setContentAreaFilled(false);
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton26, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, -1, 40));

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));
        jPanel2.setForeground(new java.awt.Color(255, 204, 204));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel2.add(txtdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 80, 150, -1));

        jLabel1.setText("Exp");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 80, 20, -1));

        jLabel22.setText("Nama Barang");
        jPanel2.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 80, -1, -1));

        txtnamabarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnamabarangActionPerformed(evt);
            }
        });
        jPanel2.add(txtnamabarang, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 80, 200, -1));

        txtharga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txthargaActionPerformed(evt);
            }
        });
        jPanel2.add(txtharga, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 110, 200, -1));

        jLabel23.setText("Harga");
        jPanel2.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, -1, -1));

        Logout.setBackground(new java.awt.Color(255, 255, 255));
        Logout.setText("LOGOUT");
        Logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutActionPerformed(evt);
            }
        });
        jPanel2.add(Logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 460, 160, 30));

        txtstok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtstokActionPerformed(evt);
            }
        });
        jPanel2.add(txtstok, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 140, 200, -1));

        jLabel24.setText("Stok");
        jPanel2.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 140, 50, -1));

        jLabel20.setText("Jenis");
        jPanel2.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 170, 30, 20));

        cmbjenis.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Padat", "Cair" }));
        jPanel2.add(cmbjenis, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 170, -1, -1));

        btnsimpan.setText("Simpan");
        btnsimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsimpanActionPerformed(evt);
            }
        });
        jPanel2.add(btnsimpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 230, -1, -1));

        btnedit.setText("Edit");
        btnedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btneditActionPerformed(evt);
            }
        });
        jPanel2.add(btnedit, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 230, -1, -1));

        hapus.setText("Hapus");
        hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusActionPerformed(evt);
            }
        });
        jPanel2.add(hapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 230, -1, -1));

        tabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "1", "2", "3", "4", "5", "6"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabel);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 260, 590, 200));
        jScrollPane1.getAccessibleContext().setAccessibleDescription("");

        btncari.setText("Cari");
        btncari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncariActionPerformed(evt);
            }
        });
        jPanel2.add(btncari, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/[removal 10.png"))); // NOI18N
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 0, 40, 40));

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel19.setText("Admin");
        jPanel2.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 0, -1, 40));

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 230, 60, -1));

        PindahDiskon.setText("Pindah");
        PindahDiskon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PindahDiskonActionPerformed(evt);
            }
        });
        jPanel2.add(PindahDiskon, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 230, -1, -1));

        jButton32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Group 5.png"))); // NOI18N
        jButton32.setBorderPainted(false);
        jButton32.setContentAreaFilled(false);
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton32, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, -1, -1));

        jButton31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Group 4 (2).png"))); // NOI18N
        jButton31.setBorderPainted(false);
        jButton31.setContentAreaFilled(false);
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton31, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 230, -1, 40));

        persegi_di_bawh_admin1.setBackground(new java.awt.Color(255, 204, 204));
        persegi_di_bawh_admin1.setForeground(new java.awt.Color(255, 204, 204));
        persegi_di_bawh_admin1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Rectangle 109.png"))); // NOI18N
        jPanel2.add(persegi_di_bawh_admin1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -50, 200, 610));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 830, 540));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void btncariActionPerformed(java.awt.event.ActionEvent evt) {                                        
        DefaultTableModel cari=(DefaultTableModel) tabel.getModel();
        TableRowSorter<DefaultTableModel> obj=new TableRowSorter<>(cari);
        tabel.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(txt_search.getText()));
   
    }                                       

    private void txt_searchActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void txt_searchFocusGained(java.awt.event.FocusEvent evt) {                                       
        // TODO add your handling code here:
        String Search=txt_search.getText();
        if(Search.equals("Search")){
            txt_search.setText("");
        }
    }                                      

    private void txt_searchFocusLost(java.awt.event.FocusEvent evt) {                                     
        String Search=txt_search.getText();
        if(Search.equals("")||Search.equals("Search")){
            txt_search.setText("Search");
    }
    }                                    

    private void txtnamabarangActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void txtstokActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void btnsimpanActionPerformed(java.awt.event.ActionEvent evt) {                                          
                                                
    String kodeBarang = generateKodeBarang();
    String namabarang = txtnamabarang.getText();
    String harga = txtharga.getText();
    String stok = txtstok.getText();
    String jenis = (String) cmbjenis.getSelectedItem();
    String Tanggal = "";
    
    int selectedRow = tabel.getSelectedRow();
    
    // Pastikan ada baris yang dipilih
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih baris yang ingin dihapus terlebih dahulu.");
        return;
    }
    if (txtdate.getDate() != null) {
        String p = "yyyy-MM-dd";
        SimpleDateFormat sd = new SimpleDateFormat(p);
        Tanggal = String.valueOf(sd.format(txtdate.getDate()));
    }
    try {
        Statement statement = (Statement) Conek.configDB().createStatement();
        statement.executeUpdate("INSERT INTO barang (Kode_barang, Nama_barang, Harga, Stok, Jenis, Expired) VALUES ('" 
                                + kodeBarang + "','" + namabarang + "','" + harga + "','" + stok + "','" + jenis + "','" + Tanggal + "');");
        statement.close();
        JOptionPane.showMessageDialog(null, "Data Barang Berhasil tersimpan");
    } catch (Exception t) {
        JOptionPane.showMessageDialog(null, "Data Barang Gagal disimpan");
    }
    datatable();

       
    }                                         

    private void txt_searchKeyReleased(java.awt.event.KeyEvent evt) {                                       
        // TODO add your handling code here:
        DefaultTableModel cari=(DefaultTableModel) tabel.getModel();
        TableRowSorter<DefaultTableModel> obj=new TableRowSorter<>(cari);
        tabel.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(txt_search.getText()));
    }                                      

    private void hapusActionPerformed(java.awt.event.ActionEvent evt) {                                      
       int selectedRow = tabel.getSelectedRow();
    
    // Pastikan ada baris yang dipilih
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih baris yang ingin dihapus terlebih dahulu.");
        return;
    }

    // Mendapatkan nilai Kode_barang dari baris yang dipilih
    String kodebarang = (String) tabel.getValueAt(selectedRow, 0); // Asumsikan kolom 0 adalah Kode_barang

  
    int confirm = JOptionPane.showConfirmDialog(this, "Yakin ingin menghapus data dengan Kode_barang: " + kodebarang + "?",
            "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    
    if (confirm == JOptionPane.YES_OPTION) {
        try {
            // Buat koneksi dan statement
            Connection conn = Conek.configDB();
            Statement statement = conn.createStatement();
            
            // Jalankan query DELETE
            int deletedRows = statement.executeUpdate("DELETE FROM barang WHERE Kode_barang = '" + kodebarang + "'");
            
            if (deletedRows > 0) {
                JOptionPane.showMessageDialog(this, "Data Berhasil Dihapus");
            } else {
                JOptionPane.showMessageDialog(this, "Data tidak ditemukan atau gagal dihapus");
            }

            // Tutup statement dan koneksi
            statement.close();
            conn.close();
            
            // Perbarui data tabel
            datatable();
        } catch (Exception t) {
            // Tampilkan pesan jika terjadi kesalahan
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menghapus data: " + t.getMessage());
        }
    }

        
    }                                     

    private void tabelMouseClicked(java.awt.event.MouseEvent evt) {                                   
        // TODO add your handling code here:
       int baris = tabel.rowAtPoint(evt.getPoint());
       String namabarang = tabel.getValueAt(baris, 1).toString();
       txtnamabarang.setText(namabarang);
       String harga = tabel.getValueAt(baris, 2).toString();
       txtharga.setText(harga);
       String stok = tabel.getValueAt(baris, 3).toString();
       txtstok.setText(stok);
    }                                  

    private void btneditActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // Mendapatkan indeks baris yang dipilih dari JTable
    int selectedRow = tabel.getSelectedRow();
    
    // Pastikan ada baris yang dipilih
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih baris yang ingin diedit terlebih dahulu.");
        return;
    }

    // Mendapatkan nilai Kode_barang dari baris yang dipilih
    String kodebarang = (String) tabel.getValueAt(selectedRow, 0); // Asumsikan kolom 0 adalah Kode_barang

    try {
        // Buat koneksi dan statement
        Connection conn = Conek.configDB();
        Statement statement = conn.createStatement();

        // Mendapatkan nilai dari form input yang diubah
        String namabarang = txtnamabarang.getText();
        String harga = txtharga.getText();
        String stok = txtstok.getText();
        String jenis = (String) cmbjenis.getSelectedItem();
        String tanggal = "";

        if (txtdate.getDate() != null) {
            SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd");
            tanggal = sd.format(txtdate.getDate());
        }

        // Jalankan query UPDATE hanya untuk nilai yang diubah
        String query = "UPDATE barang SET ";
        boolean dataChanged = false;
        
        if (!namabarang.isEmpty()) {
            query += "Nama_barang='" + namabarang + "', ";
            dataChanged = true;
        }
        if (!harga.isEmpty()) {
            query += "Harga='" + harga + "', ";
            dataChanged = true;
        }
        if (!stok.isEmpty()) {
            query += "Stok='" + stok + "', ";
            dataChanged = true;
        }
        if (jenis != null) {
            query += "Jenis='" + jenis + "', ";
            dataChanged = true;
        }
        if (!tanggal.isEmpty()) {
            query += "Expired='" + tanggal + "', ";
            dataChanged = true;
        }
        
        // Hapus koma terakhir
        if (dataChanged) {
            query = query.substring(0, query.length() - 2);
        }

        // Tambahkan kondisi WHERE
        query += " WHERE Kode_barang='" + kodebarang + "'";

        // Jalankan query UPDATE jika ada perubahan data
        if (dataChanged) {
            int updatedRows = statement.executeUpdate(query);
            
            if (updatedRows > 0) {
                JOptionPane.showMessageDialog(this, "Data Berhasil Diubah");
            } else {
                JOptionPane.showMessageDialog(this, "Data tidak ditemukan atau gagal diubah");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tidak ada data yang diubah");
        }

        // Tutup statement dan koneksi
        statement.close();
        conn.close();

        // Perbarui data tabel
        datatable();
    } catch (Exception e) {
        // Tampilkan pesan jika terjadi kesalahan
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengubah data: " + e.getMessage());
    }
    }                                       

    private void LogoutActionPerformed(java.awt.event.ActionEvent evt) {                                       
    int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin logout?", "Konfirmasi Logout", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        this.setVisible(false);
        new login_admin().setVisible(true);
    }
    }                                      

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {                                          
        this.setVisible(false);
        new Dashboard_admin().setVisible(true);
    }                                         

    private void jButton33ActionPerformed(java.awt.event.ActionEvent evt) {                                          
        this.setVisible(false);
        new JabatanKaryawan().setVisible(true);
    }                                         

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {                                          
        this.setVisible(false);
        new DataSupplier().setVisible(true);
    }                                         

    private void txthargaActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
       clear(); 
    }                                        

    private void PindahDiskonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        int selectedRow = tabel.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih baris yang ingin dipindahkan terlebih dahulu.");
        return;
}

String kodeBarang = (String) tabel.getValueAt(selectedRow, 0); // Asumsikan kolom 0 adalah Kode_Barang

// Memindahkan data ke tabel tbldiskon
Connection conn = null;
PreparedStatement pstSelect = null;
PreparedStatement pstInsert = null;
PreparedStatement pstDelete = null;
ResultSet rs = null;

try {
    conn = Conek.configDB();

    // 1. Pilih data dari tabel barang
    String sqlSelect = "SELECT * FROM barang WHERE Kode_Barang = ?";
    pstSelect = conn.prepareStatement(sqlSelect);
    pstSelect.setString(1, kodeBarang);
    rs = pstSelect.executeQuery();

    if (rs.next()) {
        // 2. Cek apakah data sudah ada di tabel tbldiskon
        String sqlCheck = "SELECT COUNT(*) FROM tbldiskon WHERE Kode_Barang = ?";
        PreparedStatement pstCheck = conn.prepareStatement(sqlCheck);
        pstCheck.setString(1, kodeBarang);
        ResultSet rsCheck = pstCheck.executeQuery();
        rsCheck.next();
        int count = rsCheck.getInt(1);
        rsCheck.close();
        pstCheck.close();

        if (count == 0) {
            // 3. Sisipkan data ke tabel tbldiskon jika belum ada
            String sqlInsert = "INSERT INTO tbldiskon (Kode_Barang, Nama_Barang, Harga, Stock, Jenis, Expired) VALUES (?, ?, ?, ?, ?, ?)";
            pstInsert = conn.prepareStatement(sqlInsert);
            pstInsert.setString(1, rs.getString("Kode_Barang"));
            pstInsert.setString(2, rs.getString("Nama_Barang"));
            pstInsert.setString(3, rs.getString("Harga"));
            pstInsert.setString(4, rs.getString("Stok"));
            pstInsert.setString(5, rs.getString("Jenis"));
            pstInsert.setString(6, rs.getString("Expired"));
            pstInsert.executeUpdate();
        }

        // 4. Hapus data dari tabel barang
        String sqlDelete = "DELETE FROM barang WHERE Kode_Barang = ?";
        pstDelete = conn.prepareStatement(sqlDelete);
        pstDelete.setString(1, kodeBarang);
        pstDelete.executeUpdate();

        JOptionPane.showMessageDialog(null, "Data berhasil dipindahkan ke tabel diskon.");

        // Perbarui tabel barang
        datatable();
    } else {
        JOptionPane.showMessageDialog(null, "Data tidak ditemukan.");
    }
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat memindahkan data: " + e.getMessage());
} finally {
    try {
        if (rs != null) rs.close();
        if (pstSelect != null) pstSelect.close();
        if (pstInsert != null) pstInsert.close();
        if (pstDelete != null) pstDelete.close();
        if (conn != null) conn.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat menutup koneksi: " + e.getMessage());
    }
}

    }
